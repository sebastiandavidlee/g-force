// Generated by gencpp from file edg_data_logger/EnableRequest.msg
// DO NOT EDIT!


#ifndef EDG_DATA_LOGGER_MESSAGE_ENABLEREQUEST_H
#define EDG_DATA_LOGGER_MESSAGE_ENABLEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace edg_data_logger
{
template <class ContainerAllocator>
struct EnableRequest_
{
  typedef EnableRequest_<ContainerAllocator> Type;

  EnableRequest_()
    : EnableDataLogging(false)  {
    }
  EnableRequest_(const ContainerAllocator& _alloc)
    : EnableDataLogging(false)  {
  (void)_alloc;
    }



   typedef uint8_t _EnableDataLogging_type;
  _EnableDataLogging_type EnableDataLogging;





  typedef boost::shared_ptr< ::edg_data_logger::EnableRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::edg_data_logger::EnableRequest_<ContainerAllocator> const> ConstPtr;

}; // struct EnableRequest_

typedef ::edg_data_logger::EnableRequest_<std::allocator<void> > EnableRequest;

typedef boost::shared_ptr< ::edg_data_logger::EnableRequest > EnableRequestPtr;
typedef boost::shared_ptr< ::edg_data_logger::EnableRequest const> EnableRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::edg_data_logger::EnableRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::edg_data_logger::EnableRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::edg_data_logger::EnableRequest_<ContainerAllocator1> & lhs, const ::edg_data_logger::EnableRequest_<ContainerAllocator2> & rhs)
{
  return lhs.EnableDataLogging == rhs.EnableDataLogging;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::edg_data_logger::EnableRequest_<ContainerAllocator1> & lhs, const ::edg_data_logger::EnableRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace edg_data_logger

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::edg_data_logger::EnableRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::edg_data_logger::EnableRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::edg_data_logger::EnableRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::edg_data_logger::EnableRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::edg_data_logger::EnableRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::edg_data_logger::EnableRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::edg_data_logger::EnableRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4b0c5dcc43b0317c4daaf806b552b4d3";
  }

  static const char* value(const ::edg_data_logger::EnableRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4b0c5dcc43b0317cULL;
  static const uint64_t static_value2 = 0x4daaf806b552b4d3ULL;
};

template<class ContainerAllocator>
struct DataType< ::edg_data_logger::EnableRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "edg_data_logger/EnableRequest";
  }

  static const char* value(const ::edg_data_logger::EnableRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::edg_data_logger::EnableRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool EnableDataLogging\n"
;
  }

  static const char* value(const ::edg_data_logger::EnableRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::edg_data_logger::EnableRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.EnableDataLogging);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EnableRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::edg_data_logger::EnableRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::edg_data_logger::EnableRequest_<ContainerAllocator>& v)
  {
    s << indent << "EnableDataLogging: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EnableDataLogging);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EDG_DATA_LOGGER_MESSAGE_ENABLEREQUEST_H
